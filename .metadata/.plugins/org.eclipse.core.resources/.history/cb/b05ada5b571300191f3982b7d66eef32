package banking.menus.super_user;

import java.util.NoSuchElementException;

import banking.Application;
import banking.exceptions.ExitingException;
import banking.menus.Menu;
import banking.menus.NewUserMenu;
import banking.menus.standard_user.HomeMenu;

public class UsersMenu extends Menu {
	protected String commands ="(create|delete|access)-user|display-user-list";
	private Integer maxArguments = 2;
	private static String name = "Users";
	private static Menu menu = null;
	
	//HELP SCREEN
	private String help= Menu.help + "\n\n" + name.toUpperCase() +" MENU HELPER\n"
			+ "This is the Users list page. Here you will be able to modify your banking application's users\n"
			+ "\nCOMMANDS\n"
			+ "create-user           : navigate through the user creation process.\n"
			+ "delete-user [user_id] : deletes the specified user.\n"
			+ "access-user [user_id] : accesses the specified user.\n"
			+ "display-user-list     : displays the list of users.\n"
			+ "----------------";
	public static Menu getMenu() {
		if(menu == null) {
			menu = new UsersMenu();
		}
		return menu;
	}
	
	private UsersMenu() {
		
	}
	
	public boolean parseCommand(String command) throws ExitingException {
		if(!super.parseCommand(command)) {
			if(tooManyArguments(command,maxArguments)) {
				System.out.println("Too many argument");
				return false;
			}
			
			//PARSE UNDER CURRENT MENU
			if(command.split(" ")[0].matches(commands)) {
				switch(command.split(" ")[0]) {
				//ALL DAO STUFF
				case "display-user-list":
					Application.currentSuperUser.displayAllUser();
					break;
				case "create-user":
					Menu.navigationHistory.add(NewUserMenu.getMenu());
					break;
				case "delete-user":
					if(Application.bankingService.deleteAccount(Integer.valueOf(command.split(" ")[1]))) {
						u.getAccounts().remove(a);
						return;
					}
					break;
				case "access-user":
					if(accessUser(Integer.valueOf(command.split(" ")[1]))) {
						Menu.navigationHistory.add(HomeMenu.getMenu());
					} else {
						System.out.println("Couldn't access user");
					}
					break;
				default :
					return false;
				}
				return true;
			}
			return false;
		}
		
		return true;
	}


	@Override
	public String getName() {
		return name;
	}
	
	public boolean accessUser(Integer userID) {
		try {
		Application.currentUser = Application.bankingService.getUser(userID).get();
		return true;
		} catch (NoSuchElementException e) {
			return false;
		}
	}
	
	public boolean deleteUser(Integer userID) {
		return false;
	}

	@Override
	public void getHelp() {
		// TODO Auto-generated method stub
		System.out.println(help);
	}
}
