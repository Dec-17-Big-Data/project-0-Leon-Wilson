package banking.menus.standard_user;

import banking.Application;
import banking.exceptions.ExitingException;
import banking.menus.Menu;
import banking.model.Account;
import banking.model.User;

public class SingleAccountMenu extends Menu {
	protected String commands ="((display-(account-summary|(all|pending|posted)?-transactions|balance)|withdraw|deposit))";
	private static String name = "Individual Account";
	private Integer maxArguments = 2;
	private static Menu menu = null;
	
	//HELP SCREEN
	private String help= Menu.help + "\n\n" + name.toUpperCase() +" MENU HELPER\n"
				+ "This is your Individual Account menu. Here you can view the accounts details as well deposit or withdrawl money\n"
				+ "\nCOMMANDS\n"
				+ "display-account-summary : displays accounts information on the screen.\n"
				+ "withdraw [amount] : withdraws the specified amount from the account. (can lead to an overdraft) \n"
				+ "deposit [amount] : deposits the specified amount to the account.\n"
				+ "display-balance : displays the balance for the current account\n"
				+ "----------------";
	public static Menu getMenu() {
		if(menu == null) {
			menu = new SingleAccountMenu();
		}
		return menu;
	}
	
	private SingleAccountMenu() {
		
	}
	
	public boolean parseCommand(String command) throws ExitingException {
		if(!super.parseCommand(command)) {
			if(tooManyArguments(command,maxArguments)) {
				System.out.println("");
				return false;
			}
			//PARSE UNDER CURRENT MENU
			if(command.split(" ")[0].matches(commands)) {
				switch(command.split(" ")[0]) {
				//ALL DAO STUFF
				case "display-account-summary":
					displayAccountSummary();
					break;
				case "withdraw":
					break;
				case "deposit":
					Menu.navigationHistory.add(SingleAccountMenu.getMenu());
					break;
				case "display-balance":
					
					break;
				default :
					return false;
				}
				return true;
			}
			return false;
		}
		
		return true;
	}
	
	public void withdraw() {
		
	}
	
	public void deposit() {
		
	}
	
	public void displayAccountSummary() {
		Account a = Application.currentUser.getAccessedAccount();
		System.out.println("ACCOUNT : "+a.getAccountID() + "\n"
				+""+ a.getAccountName() + "\n"
				+""+ a.getType() + "\n"
				+""+ a.getBalance() + "\n");
	}
	
	public void displayBalance() {
		
	}

	@Override
	public String getName() {
		return name;
	}

	@Override
	public void getHelp() {
		System.out.println(help);
	}
}
